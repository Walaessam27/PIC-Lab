app.h

typedef enum
{
	/* Application's state machine's initial state. */
	APP_STATE_INIT=0,
	APP_STATE_SERVICE_TASKS,
    TIMER_INTERRUPT,
    CN_INTERRUPT,
	/* TODO: Define states used by the application state machine. */

} APP_STATES;

typedef struct
{
    /* The application's current state */
    APP_STATES state;
    int count;
    int flag;
    /* TODO: Define any additional data used by the application. */

} APP_DATA;

------------------------------------------------
app.c

void APP_Initialize ( void )
{
    /* Place the App state machine in its initial state. */
    appData.state = APP_STATE_INIT;
    /* TODO: Initialize your application's state machine and other
     * parameters.
     */
}


/******************************************************************************
  Function:
    void APP_Tasks ( void )

  Remarks:
    See prototype in app.h.
 */
bool appInitialized;
int i;

void APP_Tasks ( void )
{

    /* Check the application's current state. */
    switch ( appData.state )
    {
        /* Application's initial state. */
        case APP_STATE_INIT:
        {
            appInitialized = true;
       
        
            if (appInitialized)
            {
                appData.count= 0;
                
                DRV_TMR0_Start();
                appData.state = APP_STATE_SERVICE_TASKS;
            }
            break;
        }

        case APP_STATE_SERVICE_TASKS:
        {
            break;
        }
        case TIMER_INTERRUPT:
        {
            if(appData.count==15) appData.count=0;
            appData.count++;
            LATG=appData.count<<12;
            appData.state = APP_STATE_SERVICE_TASKS;
            break;
        }
        case CN_INTERRUPT:
        {
            LATG=0XFFFF;
            for(i=0;i<5000000;i++);
            LATG=0X0000;
            appData.state = APP_STATE_SERVICE_TASKS;
            break;
        }

        /* TODO: implement your application state machine.*/
        

        /* The default state should never be executed. */
        default:
        {
            /* TODO: Handle error in application's state machine. */
            break;
        }
    }
}

----------------------------------------------------------------
system_Interrupt.c


APP_DATA appData; 

void __ISR(_CHANGE_NOTICE_VECTOR, ipl1AUTO)_IntHandlerChangeNotification(void)
{
    /* TODO: Add code to process interrupt here */
    if(PORTGbits.RG6==1)
    {
        appData.flag=2;
    }
    if(PORTGbits.RG7==1)
    {
        appData.flag=1;
    }
    // appData.state=CN_INTERRUPT;
    PLIB_INT_SourceFlagClear(INT_ID_0, INT_SOURCE_CHANGE_NOTICE);
}
void __ISR(_TIMER_3_VECTOR, ipl1AUTO) IntHandlerDrvTmrInstance0(void)
{
    if(appData.flag==2)
        appData.state = TIMER_INTERRUPT;
    if(appData.flag==1)
        appData.state = CN_INTERRUPT;
    PLIB_INT_SourceFlagClear(INT_ID_0,INT_SOURCE_TIMER_3);
}
